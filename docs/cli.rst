..
   This file was automatically generated by docs/create.py.


CLI
***

Introduction
============

This page describes the command line interface (CLI) for PyPGx.

For getting help on the CLI:

.. code-block:: text

   $ pypgx -h

   usage: pypgx [-h] [-v] COMMAND ...
   
   positional arguments:
     COMMAND
       call-genotypes      Call genotypes for the target gene.
       call-phenotypes     Call phenotypes for the target gene.
       combine-results     Combine various results for the target gene.
       compare-genotypes   Calculate concordance between two genotype results.
       compute-control-statistics
                           Compute summary statistics for the control gene from 
                           BAM files.
       compute-copy-number
                           Compute copy number from read depth for the target 
                           gene.
       compute-target-depth
                           Compute read depth for the target gene from BAM files.
       create-consolidated-vcf
                           Create a consolidated VCF file.
       create-regions-bed  Create a BED file which contains all regions used by 
                           PyPGx.
       estimate-phase-beagle
                           Estimate haplotype phase of observed variants with 
                           the Beagle program.
       filter-samples      Filter Archive file for specified samples.
       import-read-depth   Import read depth data for the target gene.
       import-variants     Import variant (SNV/indel) data for the target gene
       plot-bam-copy-number
                           Plot copy number profile from CovFrame[CopyNumber].
       plot-bam-read-depth
                           Plot read depth profile with BAM data.
       plot-cn-af          Plot both copy number profile and allele fraction 
                           profile in one figure.
       plot-vcf-allele-fraction
                           Plot allele fraction profile with VCF data.
       plot-vcf-read-depth
                           Plot read depth profile with VCF data.
       predict-alleles     Predict candidate star alleles based on observed 
                           variants.
       predict-cnv         Predict CNV for the target gene based on copy number 
                           data.
       prepare-depth-of-coverage
                           Prepare a depth of coverage file for all target 
                           genes with SV.
       print-metadata      Print the metadata of specified archive.
       run-chip-pipeline   Run PyPGx's genotyping pipeline for chip data.
       run-ngs-pipeline    Run PyPGx's genotyping pipeline for NGS data.
       test-cnv-caller     Test a CNV caller for the target gene.
       train-cnv-caller    Train a CNV caller for the target gene.
   
   optional arguments:
     -h, --help            Show this help message and exit.
     -v, --version         Show the version number and exit.

For getting help on a specific command (e.g. call-genotypes):

.. code-block:: text

   $ pypgx call-genotypes -h

call-genotypes
==============

.. code-block:: text

   $ pypgx call-genotypes -h
   usage: pypgx call-genotypes [-h] [--alleles PATH] [--cnv-calls PATH] genotypes
   
   Call genotypes for the target gene.
   
   Positional arguments:
     genotypes         Archive file with the semantic type 
                       SampleTable[Genotypes].
   
   Optional arguments:
     -h, --help        Show this help message and exit.
     --alleles PATH    Archive file with the semantic type SampleTable[Alleles].
     --cnv-calls PATH  Archive file with the semantic type SampleTable[CNVCalls].

call-phenotypes
===============

.. code-block:: text

   $ pypgx call-phenotypes -h
   usage: pypgx call-phenotypes [-h] genotypes phenotypes
   
   Call phenotypes for the target gene.
   
   Positional arguments:
     genotypes   Archive file with the semantic type SampleTable[Genotypes].
     phenotypes  Archive file with the semantic type SampleTable[Phenotypes].
   
   Optional arguments:
     -h, --help  Show this help message and exit.

combine-results
===============

.. code-block:: text

   $ pypgx combine-results -h
   usage: pypgx combine-results [-h] [--genotypes PATH] [--phenotypes PATH]
                                [--alleles PATH] [--cnv-calls PATH]
                                results
   
   Combine various results for the target gene.
   
   Positional arguments:
     results            Archive file with the semantic type SampleTable[Results].
   
   Optional arguments:
     -h, --help         Show this help message and exit.
     --genotypes PATH   Archive file with the semantic type 
                        SampleTable[Genotypes].
     --phenotypes PATH  Archive file with the semantic type 
                        SampleTable[Phenotypes].
     --alleles PATH     Archive file with the semantic type 
                        SampleTable[Alleles].
     --cnv-calls PATH   Archive file with the semantic type 
                        SampleTable[CNVCalls].

compare-genotypes
=================

.. code-block:: text

   $ pypgx compare-genotypes -h
   usage: pypgx compare-genotypes [-h] [--verbose] first second
   
   Calculate concordance between two genotype results.
   
   Only samples that appear in both genotype results will be used to calculate
   concordance for genotype calls as well as CNV calls.
   
   Positional arguments:
     first       First archive file with the semantic type 
                 SampleTable[Results].
     second      Second archive file with the semantic type 
                 SampleTable[Results].
   
   Optional arguments:
     -h, --help  Show this help message and exit.
     --verbose   Whether to print the verbose version of output, including 
                 discordant calls.

compute-control-statistics
==========================

.. code-block:: text

   $ pypgx compute-control-statistics -h
   usage: pypgx compute-control-statistics [-h] [--bam PATH [PATH ...]]
                                           [--fn PATH] [--gene TEXT]
                                           [--region TEXT] [--assembly TEXT]
                                           [--bed PATH]
                                           control-statistics
   
   Compute summary statistics for the control gene from BAM files.
   
   Positional arguments:
     control-statistics    Archive file with the semantic type 
                           SampleTable[Statistics].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --bam PATH [PATH ...]
                           One or more BAM files. Cannot be used with --fn.
     --fn PATH             File containing one BAM file per line. Cannot be 
                           used with --bam.
     --gene TEXT           Control gene (recommended choices: 'EGFR', 'RYR1', 
                           'VDR'). Cannot be used with --region.
     --region TEXT         Custom region to use as control gene 
                           ('chrom:start-end'). Cannot be used with --gene.
     --assembly TEXT       Reference genome assembly (default: 'GRCh37') 
                           (choices: 'GRCh37', 'GRCh38').
     --bed PATH            By default, the input data is assumed to be WGS. If 
                           it's targeted sequencing, you must provide a BED file 
                           to indicate probed regions. Note that the 'chr' 
                           prefix in BED contig names (e.g. 'chr1' vs. '1') will 
                           be automatically added or removed as necessary to 
                           match the BAM contig names.
   
   [Example] To compute summary statistics for the VDR gene from WGS data:
     $ pypgx compute-control-statistics \
     control-statistcs-VDR.zip \
     --gene VDR \
     --bam A.bam B.bam
   
   [Example] For a custom region from targeted sequencing data:
     $ pypgx compute-control-statistics \
     control-statistcs-VDR.zip \
     --gene chr1:100-200 \
     --fn bam.list \
     --bed probes.bed

compute-copy-number
===================

.. code-block:: text

   $ pypgx compute-copy-number -h
   usage: pypgx compute-copy-number [-h] [--samples-without-sv TEXT [TEXT ...]]
                                    read-depth control-statistcs output
   
   Compute copy number from read depth for the target gene.
   
   The command will convert read depth to copy number by performing intra-sample
   normalization using summary statistics from the control gene.
   
   During copy number analysis, if the input data is targeted sequencing, the
   command will apply inter-sample normalization using summary statistics across
   all samples. For best results, it is recommended to specify known samples
   without SV using --samples-without-sv.
   
   Positional arguments:
     read-depth            Archive file with the semantic type 
                           CovFrame[ReadDepth].
     control-statistcs     Archive file with the semantic type 
                           SampleTable[Statistics].
     output                Archive file with the semantic type 
                           CovFrame[CopyNumber].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --samples-without-sv TEXT [TEXT ...]
                           List of known samples with no SV.

compute-target-depth
====================

.. code-block:: text

   $ pypgx compute-target-depth -h
   usage: pypgx compute-target-depth [-h] [--bam PATH [PATH ...]] [--fn PATH]
                                     [--assembly TEXT] [--bed PATH]
                                     gene output
   
   Compute read depth for the target gene from BAM files.
   
   Positional arguments:
     gene                  Target gene.
     output                Archive file with the semantic type 
                           CovFrame[ReadDepth].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --bam PATH [PATH ...]
                           One or more BAM files. Cannot be used with --fn.
     --fn PATH             File containing one BAM file per line. Cannot be 
                           used with --bam.
     --assembly TEXT       Reference genome assembly (default: 'GRCh37') 
                           (choices: 'GRCh37', 'GRCh38').
     --bed PATH            By default, the input data is assumed to be WGS. If it 
                           is targeted sequencing, you must provide a BED file to 
                           indicate probed regions.
   
   [Example] For the CYP2D6 gene from WGS data:
     $ pypgx compute-target-depth \
     CYP2D6 \
     read-depth.zip \
     --bam A.bam B.bam
   
   [Example] For the CYP2D6 gene from targeted sequencing data:
     $ pypgx compute-target-depth \
     CYP2D6 \
     read-depth.zip \
     --fn bam.txt \
     --bed probes.bed

create-consolidated-vcf
=======================

.. code-block:: text

   $ pypgx create-consolidated-vcf -h
   usage: pypgx create-consolidated-vcf [-h]
                                        imported-variants phased-variants
                                        consolidated-variants
   
   Create a consolidated VCF file.
   
   Positional arguments:
     imported-variants     Archive file with the semantic type 
                           VcfFrame[Imported].
     phased-variants       Archive file with the semantic type 
                           VcfFrame[Phased].
     consolidated-variants
                           Archive file with the semantic type 
                           VcfFrame[Consolidated].
   
   Optional arguments:
     -h, --help            Show this help message and exit.

create-regions-bed
==================

.. code-block:: text

   $ pypgx create-regions-bed -h
   usage: pypgx create-regions-bed [-h] [--assembly TEXT] [--add-chr-prefix]
                                   [--merge] [--sv-genes]
   
   Create a BED file which contains all regions used by PyPGx.
   
   Optional arguments:
     -h, --help        Show this help message and exit.
     --assembly TEXT   Reference genome assembly (default: 'GRCh37') 
                       (choices: 'GRCh37', 'GRCh38').
     --add-chr-prefix  Whether to add the 'chr' string in contig names.
     --merge           Whether to merge overlapping intervals (gene names will 
                       be removed too).
     --sv-genes        Whether to only return genes with SV.

estimate-phase-beagle
=====================

.. code-block:: text

   $ pypgx estimate-phase-beagle -h
   usage: pypgx estimate-phase-beagle [-h] [--panel PATH] [--impute]
                                      imported-variants phased-variants
   
   Estimate haplotype phase of observed variants with the Beagle program.
   
   The 'chr' prefix in contig names (e.g. 'chr1' vs. '1') in the input VCF will
   be automatically added or removed as necessary to match that of the reference
   VCF.
   
   Positional arguments:
     imported-variants  Archive file with the semantic type VcfFrame[Imported].
     phased-variants    Archive file with the semantic type VcfFrame[Phased].
   
   Optional arguments:
     -h, --help         Show this help message and exit.
     --panel PATH       VCF file corresponding to a reference haplotype panel 
                        (compressed or uncompressed). By default, the 1KGP panel 
                        in the ~/pypgx-bundle directory will be used.
     --impute           Perform imputation of missing genotypes.

filter-samples
==============

.. code-block:: text

   $ pypgx filter-samples -h
   usage: pypgx filter-samples [-h] [--exclude]
                               input output samples [samples ...]
   
   Filter Archive file for specified samples.
   
   Positional arguments:
     input       Input archive file.
     output      Output archive file.
     samples     Specify which samples should be included for analysis 
                 by providing a text file (.txt, .tsv, .csv, or .list) 
                 containing one sample per line. Alternatively, you can 
                 provide a list of samples.
   
   Optional arguments:
     -h, --help  Show this help message and exit.
     --exclude   Exclude specified samples.

import-read-depth
=================

.. code-block:: text

   $ pypgx import-read-depth -h
   usage: pypgx import-read-depth [-h] [--samples TEXT [TEXT ...]] [--exclude]
                                  gene depth-of-coverage read-depth
   
   Import read depth data for the target gene.
   
   Positional arguments:
     gene                  Target gene.
     depth-of-coverage     Archive file with the semantic type 
                           CovFrame[DepthOfCoverage].
     read-depth            Archive file with the semantic type CovFrame[ReadDepth].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --samples TEXT [TEXT ...]
                           Specify which samples should be included for analysis 
                           by providing a text file (.txt, .tsv, .csv, or .list) 
                           containing one sample per line. Alternatively, you can 
                           provide a list of samples.
     --exclude             Exclude specified samples.

import-variants
===============

.. code-block:: text

   $ pypgx import-variants -h
   usage: pypgx import-variants [-h] [--assembly TEXT] [--platform TEXT]
                                [--samples TEXT [TEXT ...]] [--exclude]
                                gene vcf imported-variants
   
   Import variant (SNV/indel) data for the target gene.
   
   The command will first slice input VCF for the target gene and then assess
   whether every genotype call in the sliced VCF is haplotype phased. It will
   return an archive file with the semantic type VcfFrame[Consolidated] if the
   VCF is fully phased or otherwise VcfFrame[Imported].
   
   Positional arguments:
     gene                  Target gene.
     vcf                   Input VCF file must be already BGZF compressed (.gz) and 
                           indexed (.tbi) to allow random access.
     imported-variants     Archive file with the semantic type VcfFrame[Imported] 
                           or VcfFrame[Consolidated].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --assembly TEXT       Reference genome assembly (default: 'GRCh37') (choices: 
                           'GRCh37', 'GRCh38').
     --platform TEXT       Genotyping platform (default: 'WGS') (choices: 'WGS', 
                           'Targeted', 'Chip').
     --samples TEXT [TEXT ...]
                           Specify which samples should be included for analysis 
                           by providing a text file (.txt, .tsv, .csv, or .list) 
                           containing one sample per line. Alternatively, you can 
                           provide a list of samples.
     --exclude             Exclude specified samples.

plot-bam-copy-number
====================

.. code-block:: text

   $ pypgx plot-bam-copy-number -h
   usage: pypgx plot-bam-copy-number [-h] [--fitted] [--path PATH]
                                     [--samples TEXT [TEXT ...]] [--ymin FLOAT]
                                     [--ymax FLOAT] [--fontsize FLOAT]
                                     copy-number
   
   Plot copy number profile from CovFrame[CopyNumber].
   
   Positional arguments:
     copy-number           Archive file with the semantic type 
                           CovFrame[CopyNumber].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --fitted              Show the fitted line as well.
     --path PATH           Create plots in this directory.
     --samples TEXT [TEXT ...]
                           Specify which samples should be included for analysis 
                           by providing a text file (.txt, .tsv, .csv, or .list) 
                           containing one sample per line. Alternatively, you can 
                           provide a list of samples.
     --ymin FLOAT          Y-axis bottom (default: -0.3).
     --ymax FLOAT          Y-axis top (default: 6.3).
     --fontsize FLOAT      Text fontsize (default: 25).

plot-bam-read-depth
===================

.. code-block:: text

   $ pypgx plot-bam-read-depth -h
   usage: pypgx plot-bam-read-depth [-h] [--path PATH]
                                    [--samples TEXT [TEXT ...]] [--ymin FLOAT]
                                    [--ymax FLOAT] [--fontsize FLOAT]
                                    read_depth
   
   Plot read depth profile with BAM data.
   
   Positional arguments:
     read_depth            Archive file with the semantic type 
                           CovFrame[ReadDepth].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --path PATH           Create plots in this directory.
     --samples TEXT [TEXT ...]
                           Specify which samples should be included for analysis 
                           by providing a text file (.txt, .tsv, .csv, or .list) 
                           containing one sample per line. Alternatively, you can 
                           provide a list of samples.
     --ymin FLOAT          Y-axis bottom.
     --ymax FLOAT          Y-axis top.
     --fontsize FLOAT      Text fontsize (default: 25).

plot-cn-af
==========

.. code-block:: text

   $ pypgx plot-cn-af -h
   usage: pypgx plot-cn-af [-h] [--path PATH] [--samples TEXT [TEXT ...]]
                           [--ymin FLOAT] [--ymax FLOAT] [--fontsize FLOAT]
                           copy-number imported-variants
   
   Plot both copy number profile and allele fraction profile in one figure.
   
   Positional arguments:
     copy-number           Archive file with the semantic type 
                           CovFrame[CopyNumber].
     imported-variants     Archive file with the semantic type 
                           VcfFrame[Imported].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --path PATH           Create plots in this directory.
     --samples TEXT [TEXT ...]
                           Specify which samples should be included for analysis 
                           by providing a text file (.txt, .tsv, .csv, or .list) 
                           containing one sample per line. Alternatively, you can 
                           provide a list of samples.
     --ymin FLOAT          Y-axis bottom (default: -0.3).
     --ymax FLOAT          Y-axis top (default: 6.3).
     --fontsize FLOAT      Text fontsize (default: 25).

plot-vcf-allele-fraction
========================

.. code-block:: text

   $ pypgx plot-vcf-allele-fraction -h
   usage: pypgx plot-vcf-allele-fraction [-h] [--path PATH]
                                         [--samples TEXT [TEXT ...]]
                                         [--fontsize FLOAT]
                                         imported-variants
   
   Plot allele fraction profile from VcfFrame[Imported].
   
   Positional arguments:
     imported-variants     Archive file with the semantic type 
                           VcfFrame[Imported].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --path PATH           Create plots in this directory.
     --samples TEXT [TEXT ...]
                           Specify which samples should be included for analysis 
                           by providing a text file (.txt, .tsv, .csv, or .list) 
                           containing one sample per line. Alternatively, you can 
                           provide a list of samples.
     --fontsize FLOAT      Text fontsize (default: 25).

plot-vcf-read-depth
===================

.. code-block:: text

   $ pypgx plot-vcf-read-depth -h
   usage: pypgx plot-vcf-read-depth [-h] [--assembly TEXT] [--path PATH]
                                    [--samples TEXT [TEXT ...]] [--ymin FLOAT]
                                    [--ymax FLOAT]
                                    gene vcf
   
   Plot read depth profile with VCF data.
   
   Positional arguments:
     gene                  Target gene.
     vcf                   VCF file.
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --assembly TEXT       Reference genome assembly (default: 'GRCh37') 
                           (choices: 'GRCh37', 'GRCh38').
     --path PATH           Create plots in this directory.
     --samples TEXT [TEXT ...]
                           Specify which samples should be included for analysis 
                           by providing a text file (.txt, .tsv, .csv, or .list) 
                           containing one sample per line. Alternatively, you can 
                           provide a list of samples.
     --ymin FLOAT          Y-axis bottom.
     --ymax FLOAT          Y-axis top.

predict-alleles
===============

.. code-block:: text

   $ pypgx predict-alleles -h
   usage: pypgx predict-alleles [-h] consolidated-variants alleles
   
   Predict candidate star alleles based on observed variants.
   
   Positional arguments:
     consolidated-variants
                           Archive file with the semantic type 
                           VcfFrame[Consolidated].
     alleles               Archive file with the semantic type 
                           SampleTable[Alleles].
   
   Optional arguments:
     -h, --help            Show this help message and exit.

predict-cnv
===========

.. code-block:: text

   $ pypgx predict-cnv -h
   usage: pypgx predict-cnv [-h] [--cnv-caller PATH] copy-number cnv-calls
   
   Predict CNV for the target gene based on copy number data.
   
   Genomic positions that are missing copy number because, for example, the
   input data is targeted sequencing will be imputed with forward filling.
   
   Positional arguments:
     copy-number        Archive file with the semantic type CovFrame[CopyNumber].
     cnv-calls          Archive file with the semantic type 
                        SampleTable[CNVCalls].
   
   Optional arguments:
     -h, --help         Show this help message and exit.
     --cnv-caller PATH  Archive file with the semantic type Model[CNV]. By 
                        default, a pre-trained CNV caller in the ~/pypgx-bundle 
                        directory will be used.

prepare-depth-of-coverage
=========================

.. code-block:: text

   $ pypgx prepare-depth-of-coverage -h
   usage: pypgx prepare-depth-of-coverage [-h] [--bam PATH [PATH ...]]
                                          [--fn PATH] [--assembly TEXT]
                                          [--bed PATH]
                                          depth-of-coverage
   
   Prepare a depth of coverage file for all target genes with SV.
   
   Positional arguments:
     depth-of-coverage     Archive file with the semantic type 
                           CovFrame[DepthOfCoverage].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --bam PATH [PATH ...]
                           One or more BAM files. Cannot be used with --fn.
     --fn PATH             File containing one BAM file per line. Cannot be used 
                           with --bam.
     --assembly TEXT       Reference genome assembly (default: 'GRCh37') 
                           (choices: 'GRCh37', 'GRCh38').
     --bed PATH            By default, the input data is assumed to be WGS. If 
                           it's targeted sequencing, you must provide a BED file 
                           to indicate probed regions. Note that the 'chr' 
                           prefix in BED contig names (e.g. 'chr1' vs. '1') will 
                           be automatically added or removed as necessary to 
                           match the BAM contig names.
   
   [Example] When the input data is WGS:
     $ pypgx prepare-depth-of-coverage \
     depth-of-coverage.zip \
     --bam A.bam B.bam
   
   [Example] When the input data is targeted sequencing:
     $ pypgx prepare-depth-of-coverage \
     depth-of-coverage.zip \
     --fn bam.txt \
     --bed probes.bed

print-metadata
==============

.. code-block:: text

   $ pypgx print-metadata -h
   usage: pypgx print-metadata [-h] input
   
   Print the metadata of specified archive.
   
   Positional arguments:
     input       Archive file.
   
   Optional arguments:
     -h, --help  Show this help message and exit.

run-chip-pipeline
=================

.. code-block:: text

   $ pypgx run-chip-pipeline -h
   usage: pypgx run-chip-pipeline [-h] [--assembly TEXT] [--panel PATH]
                                  [--impute] [--force]
                                  [--samples TEXT [TEXT ...]] [--exclude]
                                  gene output variants
   
   Run PyPGx's genotyping pipeline for chip data.
   
   Positional arguments:
     gene                  Target gene.
     output                Output directory.
     variants              Input VCF file must be already BGZF compressed (.gz) 
                           and indexed (.tbi) to allow random access. Statistical 
                           haplotype phasing will be skipped if input VCF is 
                           already fully phased.
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --assembly TEXT       Reference genome assembly (default: 'GRCh37') (choices: 
                           'GRCh37', 'GRCh38').
     --panel PATH          VCF file corresponding to a reference haplotype panel 
                           (compressed or uncompressed). By default, the 1KGP panel 
                           in the ~/pypgx-bundle directory will be used.
     --impute              Perform imputation of missing genotypes.
     --force               Overwrite output directory if it already exists.
     --samples TEXT [TEXT ...]
                           Specify which samples should be included for analysis 
                           by providing a text file (.txt, .tsv, .csv, or .list) 
                           containing one sample per line. Alternatively, you can 
                           provide a list of samples.
     --exclude             Exclude specified samples.
   
   [Example] To genotype the CYP3A5 gene from chip data:
     $ pypgx run-chip-pipeline \
     CYP3A5 \
     CYP3A5-pipeline \
     variants.vcf.gz

run-ngs-pipeline
================

.. code-block:: text

   $ pypgx run-ngs-pipeline -h
   usage: pypgx run-ngs-pipeline [-h] [--variants PATH]
                                 [--depth-of-coverage PATH]
                                 [--control-statistics PATH] [--platform TEXT]
                                 [--assembly TEXT] [--panel PATH] [--force]
                                 [--samples TEXT [TEXT ...]] [--exclude]
                                 [--samples-without-sv TEXT [TEXT ...]]
                                 [--do-not-plot-copy-number]
                                 [--do-not-plot-allele-fraction]
                                 [--cnv-caller PATH]
                                 gene output
   
   Run PyPGx's genotyping pipeline for NGS data.
   
   During copy number analysis, if the input data is targeted sequencing, the
   command will apply inter-sample normalization using summary statistics across
   all samples. For best results, it is recommended to specify known samples
   without SV using --samples-without-sv.
   
   Positional arguments:
     gene                  Target gene.
     output                Output directory.
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --variants PATH       Input VCF file must be already BGZF compressed (.gz) 
                           and indexed (.tbi) to allow random access. 
                           Statistical haplotype phasing will be skipped if 
                           input VCF is already fully phased.
     --depth-of-coverage PATH
                           Archive file with the semantic type 
                           CovFrame[DepthOfCoverage].
     --control-statistics PATH
                           Archive file with the semantic type 
                           SampleTable[Statistcs].
     --platform TEXT       Genotyping platform (default: 'WGS') (choices: 'WGS', 
                           'Targeted')
     --assembly TEXT       Reference genome assembly (default: 'GRCh37') 
                           (choices: 'GRCh37', 'GRCh38').
     --panel PATH          VCF file corresponding to a reference haplotype panel 
                           (compressed or uncompressed). By default, the 1KGP panel 
                           in the ~/pypgx-bundle directory will be used.
     --force               Overwrite output directory if it already exists.
     --samples TEXT [TEXT ...]
                           Specify which samples should be included for analysis 
                           by providing a text file (.txt, .tsv, .csv, or .list) 
                           containing one sample per line. Alternatively, you 
                           can provide a list of samples.
     --exclude             Exclude specified samples.
     --samples-without-sv TEXT [TEXT ...]
                           List of known samples without SV.
     --do-not-plot-copy-number
                           Do not plot copy number profile.
     --do-not-plot-allele-fraction
                           Do not plot allele fraction profile.
     --cnv-caller PATH     Archive file with the semantic type Model[CNV]. By 
                           default, a pre-trained CNV caller will be used.
   
   [Example] To genotype the CYP3A5 gene, which does not have SV, from WGS data:
     $ pypgx run-ngs-pipeline \
     CYP3A5 \
     CYP3A5-pipeline \
     --variants variants.vcf.gz
   
   [Example] To genotype the CYP2D6 gene, which does have SV, from WGS data:
     $ pypgx run-ngs-pipeline \
     CYP2D6 \
     CYP2D6-pipeline \
     --variants variants.vcf.gz \
     --depth-of-coverage depth-of-coverage.tsv \
     --control-statistcs control-statistics-VDR.zip
   
   [Example] To genotype the CYP2D6 gene from targeted sequencing data:
     $ pypgx run-ngs-pipeline \
     CYP2D6 \
     CYP2D6-pipeline \
     --variants variants.vcf.gz \
     --depth-of-coverage depth-of-coverage.tsv \
     --control-statistcs control-statistics-VDR.zip \
     --platform Targeted

test-cnv-caller
===============

.. code-block:: text

   $ pypgx test-cnv-caller -h
   usage: pypgx test-cnv-caller [-h] [--confusion-matrix PATH]
                                cnv-caller copy-number cnv-calls
   
   Test a CNV caller for the target gene.
   
   Positional arguments:
     cnv-caller            Archive file with the semantic type Model[CNV].
     copy-number           Archive file with the semantic type 
                           CovFrame[CopyNumber].
     cnv-calls             Archive file with the semantic type 
                           SampleTable[CNVCalls].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --confusion-matrix PATH
                           Write the confusion matrix as a CSV file.

train-cnv-caller
================

.. code-block:: text

   $ pypgx train-cnv-caller -h
   usage: pypgx train-cnv-caller [-h] [--confusion-matrix PATH]
                                 copy-number cnv-calls cnv-caller
   
   Train a CNV caller for the target gene.
   
   This command will return a SVM-based multiclass classifier that makes CNV
   calls using the one-vs-rest strategy.
   
   Positional arguments:
     copy-number           Archive file with the semantic type 
                           CovFrame[CopyNumber].
     cnv-calls             Archive file with the semantic type 
                           SampleTable[CNVCalls].
     cnv-caller            Archive file with the semantic type Model[CNV].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --confusion-matrix PATH
                           Write the confusion matrix as a CSV file.

