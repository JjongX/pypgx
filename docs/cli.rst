..
   This file was automatically generated by docs/create.py.


CLI
***

Introduction
============

This section describes the command line interface (CLI) for PyPGx.

For getting help on the CLI:

.. code-block:: text

   $ pypgx -h

   usage: pypgx [-h] [-v] COMMAND ...
   
   positional arguments:
     COMMAND
       call-genotypes      Call genotypes for target gene.
       combine-results     Combine various results for the target gene.
       compute-control-statistics
                           Compute various statistics for control gene with BAM data.
       compute-copy-number
                           Compute copy number from read depth for target gene.
       compute-target-depth
                           Compute read depth for target gene with BAM data.
       create-consolidated-vcf
                           Create consolidated VCF.
       create-regions-bed  Create a BED file which contains all regions used by PyPGx.
       estimate-phase-beagle
                           Estimate haplotype phase of observed variants with the Beagle program.
       filter-samples      Filter Archive file for specified samples.
       import-read-depth   Import read depth data for target gene.
       import-variants     Import variant data for the target gene.
       plot-bam-copy-number
                           Plot copy number profile with BAM data.
       plot-bam-read-depth
                           Plot read depth profile with BAM data.
       plot-vcf-allele-fraction
                           Plot allele fraction profile with VCF data.
       plot-vcf-read-depth
                           Plot read depth profile with VCF data.
       predict-alleles     Predict candidate star alleles based on observed variants.
       predict-cnv         Predict CNV for target gene based on copy number data.
       prepare-depth-of-coverage
                           Prepare a depth of coverage file for target genes with SV.
       print-metadata      Print the metadata of specified archive.
       run-ngs-pipeline    Run NGS pipeline for the target gene.
       test-cnv-caller     Test a CNV caller for the target gene.
       train-cnv-caller    Train a CNV caller for the target gene.
   
   optional arguments:
     -h, --help            Show this help message and exit.
     -v, --version         Show the version number and exit.

For getting help on a specific command (e.g. call-genotypes):

.. code-block:: text

   $ pypgx call-genotypes -h

call-genotypes
==============

.. code-block:: text

   $ pypgx call-genotypes -h
   usage: pypgx call-genotypes [-h] [--alleles PATH] [--cnv-calls PATH] genotypes
   
   ###################################
   # Call genotypes for target gene. #
   ###################################
   
   Usage examples:
     $ pypgx call-genotypes CYP2D6-genotypes.zip --alleles CYP2D6-alleles.zip --cnv-calls CYP2D6-cnv-calls.zip
   
   Positional arguments:
     genotypes         Archive file with the semantic type SampleTable[Genotypes].
   
   Optional arguments:
     -h, --help        Show this help message and exit.
     --alleles PATH    Archive file with the semantic type SampleTable[Alleles].
     --cnv-calls PATH  Archive file with the semantic type SampleTable[CNVCalls].

combine-results
===============

.. code-block:: text

   $ pypgx combine-results -h
   usage: pypgx combine-results [-h] [--genotypes PATH] [--alleles PATH]
                                [--cnv-calls PATH]
                                results
   
   ################################################
   # Combine various results for the target gene. #
   ################################################
   
   Usage examples:
     $ pypgx combine-results CYP2D6-results.zip --genotypes CYP2D6-genotypes.zip --alleles CYP2D6-alleles.zip --cnv-calls CYP2D6-cnv-calls.zip
   
   Positional arguments:
     results           Archive file with the semantic type SampleTable[Results].
   
   Optional arguments:
     -h, --help        Show this help message and exit.
     --genotypes PATH  Archive file with the semantic type SampleTable[Genotypes].
     --alleles PATH    Archive file with the semantic type SampleTable[Alleles].
     --cnv-calls PATH  Archive file with the semantic type SampleTable[CNVCalls].

compute-control-statistics
==========================

.. code-block:: text

   $ pypgx compute-control-statistics -h
   usage: pypgx compute-control-statistics [-h] [--bam PATH [PATH ...]]
                                           [--fn PATH] [--gene TEXT]
                                           [--region TEXT] [--assembly TEXT]
                                           [--bed PATH]
                                           control-statistics
   
   ##############################################################
   # Compute various statistics for control gene with BAM data. #
   ##############################################################
   
   Input BAM files must be specified with either '--bam' or '--fn', but it's an error to use both. Similarly, control gene must be specified with either '--gene' or '--region', but it's an error to use both.
   
   By default, the input data is assumed to be WGS. If it's targeted sequencing, you must provide a BED file with '--bed' to indicate probed regions.
   
   Usage examples:
     $ pypgx compute-control-statistics control-statistcs-VDR.zip --gene VDR --bam A.bam B.bam
     $ pypgx compute-control-statistics control-statistcs-VDR.zip --gene VDR --fn bam.list
     $ pypgx compute-control-statistics control-statistcs-VDR.zip --gene VDR --fn bam.list --bed probes.bed
     $ pypgx compute-control-statistics control-statistcs-custom.zip --region chr1:100-200 --fn bam.list
   
   Positional arguments:
     control-statistics    Archive file with the semantic type SampleTable[Statistics].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --bam PATH [PATH ...]
                           One or more BAM files.
     --fn PATH             File containing one BAM file per line.
     --gene TEXT           Control gene (recommended choices: 'EGFR', 'RYR1', 'VDR').
     --region TEXT         Custom region to use as control gene ('chrom:start-end').
     --assembly TEXT       Reference genome assembly (default: 'GRCh37') (choices: 'GRCh37', 'GRCh38').
     --bed PATH            BED file.

compute-copy-number
===================

.. code-block:: text

   $ pypgx compute-copy-number -h
   usage: pypgx compute-copy-number [-h] [--samples TEXT [TEXT ...]]
                                    read-depth control-statistcs output
   
   ########################################################
   # Compute copy number from read depth for target gene. #
   ########################################################
   
   The method will convert read depth from target gene to copy number by performing intra-sample normalization using summary statistics from control gene.
   
   If the input data was generated with targeted sequencing as opposed to WGS, the method will also apply inter-sample normalization using summary statistics across all samples. For best results, it is recommended to manually specify a list of known reference samples that do not have SV.
   
   Usage examples:
     $ pypgx compute-copy-number CYP2D6-read-depth.zip VDR-control-statistcs.zip CYP2D6-copy-number.zip
   
   Positional arguments:
     read-depth            Archive file with the semantic type CovFrame[ReadDepth].
     control-statistcs     Archive file with the semantic type SampleTable[Statistics].
     output                Archive file with the semantic type CovFrame[CopyNumber].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --samples TEXT [TEXT ...]
                           List of known samples with no SV.

compute-target-depth
====================

.. code-block:: text

   $ pypgx compute-target-depth -h
   usage: pypgx compute-target-depth [-h] [--bam PATH [PATH ...]] [--fn PATH]
                                     [--assembly TEXT] [--bed PATH]
                                     gene output
   
   #####################################################
   # Compute read depth for target gene with BAM data. #
   #####################################################
   
   Input BAM files must be specified with either '--bam' or '--fn', but it's an error to use both.
   
   By default, the input data is assumed to be WGS. If it's targeted sequencing, you must provide a BED file with ``bed`` to indicate probed regions.
   
   Usage examples:
     $ fuc compute-target-depth gene out.zip --bam A.bam B.bam
     $ fuc compute-target-depth gene out.zip --fn bam.list
     $ fuc compute-target-depth gene out.zip --fn bam.list --assembly GRCh38
     $ fuc compute-target-depth gene out.zip --fn bam.list --bed panel.bed
   
   Positional arguments:
     gene                  Target gene.
     output                Archive file with the semantic type CovFrame[ReadDepth].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --bam PATH [PATH ...]
                           One or more BAM files.
     --fn PATH             File containing one BAM file per line.
     --assembly TEXT       Reference genome assembly (default: 'GRCh37') (choices: 'GRCh37', 'GRCh38').
     --bed PATH            BED file.

create-consolidated-vcf
=======================

.. code-block:: text

   $ pypgx create-consolidated-vcf -h
   usage: pypgx create-consolidated-vcf [-h]
                                        imported-variants phased-variants
                                        consolidated-variants
   
   ############################
   # Create consolidated VCF. #
   ############################
   
   Usage examples:
     $ pypgx create-consolidated-vcf CYP2D6-imported-variants.zip CYP2D6-phased-variants.zip CYP2D6-consolidated-variants.zip
   
   Positional arguments:
     imported-variants     Archive file with the semantic type VcfFrame[Imported].
     phased-variants       Archive file with the semantic type VcfFrame[Phased]
     consolidated-variants
                           Archive file with the semantic type VcfFrame[Consolidated].
   
   Optional arguments:
     -h, --help            Show this help message and exit.

create-regions-bed
==================

.. code-block:: text

   $ pypgx create-regions-bed -h
   usage: pypgx create-regions-bed [-h] [--assembly TEXT] [--chr-prefix]
                                   [--merge] [--sv-genes]
   
   ###############################################################
   # Create a BED file which contains all regions used by PyPGx. #
   ###############################################################
   
   Usage examples:
     $ pypgx create-regions-bed > regions.bed
   
   Optional arguments:
     -h, --help       Show this help message and exit.
     --assembly TEXT  Reference genome assembly (default: 'GRCh37') (choices: 'GRCh37', 'GRCh38').
     --chr-prefix     Whether to add the 'chr' string in contig names.
     --merge          Whether to merge overlapping intervals (gene names will be removed too).
     --sv-genes       Whether to only return genes with SV.

estimate-phase-beagle
=====================

.. code-block:: text

   $ pypgx estimate-phase-beagle -h
   usage: pypgx estimate-phase-beagle [-h] [--panel PATH] [--impute]
                                      imported-variants phased-variants
   
   ##########################################################################
   # Estimate haplotype phase of observed variants with the Beagle program. #
   ##########################################################################
   
   Usage examples:
     $ pypgx estimate-phase-beagle imported-variants.zip phased-variants.zip
   
   Positional arguments:
     imported-variants  Archive file with the semantic type VcfFrame[Imported].
     phased-variants    Archive file with the semantic type VcfFrame[Phased].
   
   Optional arguments:
     -h, --help         Show this help message and exit.
     --panel PATH       Reference haplotype panel. By default, the 1KGP panel is used.
     --impute           Whether to perform imputation of missing genotypes.

filter-samples
==============

.. code-block:: text

   $ pypgx filter-samples -h
   usage: pypgx filter-samples [-h] [--samples TEXT [TEXT ...]] [--exclude]
                               [--fn PATH]
                               input output
   
   ##############################################
   # Filter Archive file for specified samples. #
   ##############################################
   
   Samples can be specified with either '--samples' or '--fn', but it's an error to use both.
   
   Usage examples:
     $ pypgx filter-samples in.zip out.zip --samples A B C
     $ pypgx filter-samples in.zip out.zip --samples A B C --exclude
     $ pypgx filter-samples in.zip out.zip --fn samples.list
   
   Positional arguments:
     input                 Input archive file.
     output                Output archive file.
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --samples TEXT [TEXT ...]
                           Space-separated list of samples names (the order matters).
     --exclude             Exclude specified samples.
     --fn PATH             File containing one sample name per line.

import-read-depth
=================

.. code-block:: text

   $ pypgx import-read-depth -h
   usage: pypgx import-read-depth [-h] [--assembly TEXT] [--platform TEXT]
                                  gene depth-of-coverage read-depth
   
   ###########################################
   # Import read depth data for target gene. #
   ###########################################
   
   Usage examples:
     $ pypgx import-read-depth CYP2D6 depth-of-coverage.tsv CYP2D6-read-depth.zip
   
   Positional arguments:
     gene               Target gene.
     depth-of-coverage  Depth of coverage file (zipped or unzipped).
     read-depth         Archive file with the semantic type CovFrame[ReadDepth].
   
   Optional arguments:
     -h, --help         Show this help message and exit.
     --assembly TEXT    Reference genome assembly (default: 'GRCh37') (choices: 'GRCh37', 'GRCh38').
     --platform TEXT    NGS platform (default: 'WGS') (choices: 'WGS', 'Targeted').

import-variants
===============

.. code-block:: text

   $ pypgx import-variants -h
   usage: pypgx import-variants [-h] [--assembly TEXT] gene vcf imported-variants
   
   ############################################
   # Import variant data for the target gene. #
   ############################################
   
   Usage examples:
     $ pypgx import-variants CYP2D6 input.vcf CYP2D6-imported-variants.zip
   
   Positional arguments:
     gene               Target gene.
     vcf                VCF file (zipped or unzipped).
     imported-variants  Archive file with the semantic type VcfFrame[Imported].
   
   Optional arguments:
     -h, --help         Show this help message and exit.
     --assembly TEXT    Reference genome assembly (default: 'GRCh37') (choices: 'GRCh37', 'GRCh38').

plot-bam-copy-number
====================

.. code-block:: text

   $ pypgx plot-bam-copy-number -h
   usage: pypgx plot-bam-copy-number [-h] [--path PATH]
                                     [--samples TEXT [TEXT ...]] [--ymin FLOAT]
                                     [--ymax FLOAT]
                                     copy-number
   
   ###########################################
   # Plot copy number profile with BAM data. #
   ###########################################
   
   Usage examples:
     $ pypgx plot-bam-copy-number CYP2D6-copy-number.zip
   
   Positional arguments:
     copy-number           Archive file with the semantic type CovFrame[CopyNumber].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --path PATH           Create plots in this directory.
     --samples TEXT [TEXT ...]
                           Create plots only for these samples.
     --ymin FLOAT          Y-axis bottom.
     --ymax FLOAT          Y-axis top.

plot-bam-read-depth
===================

.. code-block:: text

   $ pypgx plot-bam-read-depth -h
   usage: pypgx plot-bam-read-depth [-h] [--path PATH]
                                    [--samples TEXT [TEXT ...]] [--ymin FLOAT]
                                    [--ymax FLOAT]
                                    read_depth
   
   ##########################################
   # Plot read depth profile with BAM data. #
   ##########################################
   
   Usage examples:
     $ pypgx plot-bam-read-depth CYP2D6 target.tsv
   
   Positional arguments:
     read_depth            Archive file with the semantic type CovFrame[ReadDepth]
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --path PATH           Create plots in this directory.
     --samples TEXT [TEXT ...]
                           Create plots only for these samples.
     --ymin FLOAT          Y-axis bottom.
     --ymax FLOAT          Y-axis top.

plot-vcf-allele-fraction
========================

.. code-block:: text

   $ pypgx plot-vcf-allele-fraction -h
   usage: pypgx plot-vcf-allele-fraction [-h] [--path PATH]
                                         [--samples TEXT [TEXT ...]]
                                         [--ymin FLOAT] [--ymax FLOAT]
                                         imported-variants
   
   ###############################################
   # Plot allele fraction profile with VCF data. #
   ###############################################
   
   Usage examples:
     $ pypgx plot-vcf-allele-fraction CYP2D6 in.vcf
   
   Positional arguments:
     imported-variants     VCF file.
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --path PATH           Create plots in this directory.
     --samples TEXT [TEXT ...]
                           Create plots only for these samples.
     --ymin FLOAT          Y-axis bottom.
     --ymax FLOAT          Y-axis top.

plot-vcf-read-depth
===================

.. code-block:: text

   $ pypgx plot-vcf-read-depth -h
   usage: pypgx plot-vcf-read-depth [-h] [--assembly TEXT] [--path PATH]
                                    [--samples TEXT [TEXT ...]] [--ymin FLOAT]
                                    [--ymax FLOAT]
                                    gene vcf
   
   ##########################################
   # Plot read depth profile with VCF data. #
   ##########################################
   
   Usage examples:
     $ pypgx plot-vcf-read-depth CYP2D6 in.vcf
   
   Positional arguments:
     gene                  Target gene.
     vcf                   VCF file.
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --assembly TEXT       Reference genome assembly (default: 'GRCh37') (choices: 'GRCh37', 'GRCh38').
     --path PATH           Create plots in this directory.
     --samples TEXT [TEXT ...]
                           Create plots only for these samples.
     --ymin FLOAT          Y-axis bottom.
     --ymax FLOAT          Y-axis top.

predict-alleles
===============

.. code-block:: text

   $ pypgx predict-alleles -h
   usage: pypgx predict-alleles [-h] consolidated-variants alleles
   
   ##############################################################
   # Predict candidate star alleles based on observed variants. #
   ##############################################################
   
   Usage examples:
     $ pypgx predict-alleles CYP2D6-consolidated-variants.zip CYP2D6-alleles.zip
   
   Positional arguments:
     consolidated-variants
                           Archive file with the semantic type VcfFrame[Consolidated].
     alleles               Archive file with the semantic type SampleTable[Alleles].
   
   Optional arguments:
     -h, --help            Show this help message and exit.

predict-cnv
===========

.. code-block:: text

   $ pypgx predict-cnv -h
   usage: pypgx predict-cnv [-h] copy-number cnv-calls
   
   ##########################################################
   # Predict CNV for target gene based on copy number data. #
   ##########################################################
   
   If there are missing values because, for example, the input data was generated with targeted sequencing, they will be filled in with the sample's median copy number.
   
   Usage examples:
     $ pypgx predict-cnv CYP2D6-copy-number.zip CYP2D6-cnv-calls.zip
   
   Positional arguments:
     copy-number  Archive file with the semantic type CovFrame[CopyNumber].
     cnv-calls    Archive file with the semantic type SampleTable[CNVCalls].
   
   Optional arguments:
     -h, --help   Show this help message and exit.

prepare-depth-of-coverage
=========================

.. code-block:: text

   $ pypgx prepare-depth-of-coverage -h
   usage: pypgx prepare-depth-of-coverage [-h] [--bam PATH [PATH ...]]
                                          [--fn PATH] [--assembly TEXT]
                                          [--bed PATH]
                                          depth-of-coverage
   
   ##############################################################
   # Prepare a depth of coverage file for target genes with SV. #
   ##############################################################
   
   Input BAM files must be specified with either '--bam' or '--fn', but it's an error to use both.
   
   By default, the input data is assumed to be WGS. If it's targeted sequencing, you must provide a BED file with '--bed' to indicate probed regions.
   
   Usage examples:
     $ fuc prepare-depth-of-coverage depth-of-coverage.tsv --bam A.bam B.bam
     $ fuc prepare-depth-of-coverage depth-of-coverage.tsv --fn bam.list
   
   Positional arguments:
     depth-of-coverage     Depth of coverage file.
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --bam PATH [PATH ...]
                           One or more BAM files.
     --fn PATH             File containing one BAM file per line.
     --assembly TEXT       Reference genome assembly (default: 'GRCh37') (choices: 'GRCh37', 'GRCh38').
     --bed PATH            BED file.

print-metadata
==============

.. code-block:: text

   $ pypgx print-metadata -h
   usage: pypgx print-metadata [-h] input
   
   ############################################
   # Print the metadata of specified archive. #
   ############################################
   
   Usage examples:
     $ pypgx print-metadata in.zip
   
   Positional arguments:
     input       Archive file.
   
   Optional arguments:
     -h, --help  Show this help message and exit.

run-ngs-pipeline
================

.. code-block:: text

   $ pypgx run-ngs-pipeline -h
   usage: pypgx run-ngs-pipeline [-h] [--variants PATH]
                                 [--depth-of-coverage PATH]
                                 [--control-statistics PATH] [--panel PATH]
                                 [--force] [--do-not-plot-copy-number]
                                 [--do-not-plot-allele-fraction]
                                 gene output
   
   #########################################
   # Run NGS pipeline for the target gene. #
   #########################################
   
   Usage examples:
     $ pypgx run-ngs-pipeline CYP2D6 CYP2D6-pipeline --variants variants.vcf --depth-of-coverage depth-of-coverage.tsv --control-statistcs control-statistics-VDR.zip
   
   Positional arguments:
     gene                  Target gene.
     output                Output directory.
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --variants PATH       VCF file (zipped or unzipped).
     --depth-of-coverage PATH
                           Depth of coverage file (zipped or unzipped).
     --control-statistics PATH
                           Archive file with the semandtic type SampleTable[Statistcs].
     --panel PATH          Reference haplotype panel. By default, the 1KGP panel is used.
     --force               Overwrite output directory if it already exists.
     --do-not-plot-copy-number
                           Do not plot copy number profile.
     --do-not-plot-allele-fraction
                           Do not plot allele fraction profile.

test-cnv-caller
===============

.. code-block:: text

   $ pypgx test-cnv-caller -h
   usage: pypgx test-cnv-caller [-h] [--confusion-matrix PATH]
                                cnv-caller copy-number cnv-calls
   
   ##########################################
   # Test a CNV caller for the target gene. #
   ##########################################
   
   Usage examples:
     $ pypgx test-cnv-caller CYP2D6-cnv-caller.zip CYP2D6-copy-number.zip CYP2D6-cnv-calls.zip
   
   Positional arguments:
     cnv-caller            Archive file with the semantic type Model[CNV].
     copy-number           Archive file with the semantic type CovFrame[CopyNumber].
     cnv-calls             Archive file with the semantic type SampleTable[CNVCalls].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --confusion-matrix PATH
                           Write the confusion matrix as a CSV file.

train-cnv-caller
================

.. code-block:: text

   $ pypgx train-cnv-caller -h
   usage: pypgx train-cnv-caller [-h] [--confusion-matrix PATH]
                                 copy-number cnv-calls cnv-caller
   
   ###########################################
   # Train a CNV caller for the target gene. #
   ###########################################
   
   This command will return a SVM-based multiclass classifier that makes CNV calls using the one-vs-rest stategy.
   
   Usage examples:
     $ pypgx train-cnv-caller CYP2D6-copy-number.zip CYP2D6-cnv-calls.zip CYP2D6-cnv-caller.zip
   
   Positional arguments:
     copy-number           Archive file with the semantic type CovFrame[CopyNumber]
     cnv-calls             Archive file with the semantic type SampleTable[CNVCalls].
     cnv-caller            Archive file with the semantic type Model[CNV].
   
   Optional arguments:
     -h, --help            Show this help message and exit.
     --confusion-matrix PATH
                           Write the confusion matrix as a CSV file.

